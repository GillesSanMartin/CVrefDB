% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CV_blastn.R
\name{CV_blastn}
\alias{CV_blastn}
\title{Cross-validation of taxonomic assignations by blast on a DNA reference database}
\usage{
CV_blastn(
  fasta_db,
  taxo,
  output = if (!is.character(fasta_db)) {
     NULL
 } else {
    
    paste0(dirname(fasta_db), "/CV_blastn_output.csv")
 },
  label = ifelse(is.null(output), "", output),
  folds_dir = ifelse(is.character(fasta_db), dirname(fasta_db), "."),
  alternative_fasta_db = NULL,
  alternative_taxo = NULL,
  k = 10,
  folds_subset = 1:k,
  sequences_subset = NULL,
  query_filter = NULL,
  db_filter = NULL,
  nb_cores = parallel::detectCores(),
  max_target_seqs = 15,
  verbose = TRUE,
  clean_species = TRUE,
  folds_remove = TRUE,
  seed = as.numeric(Sys.time())
)
}
\arguments{
\item{fasta_db}{Path to a reference database in fasta format or a DNAStringSet object (Biostring package)}

\item{taxo}{data.frame or path to a 2 columns tsv file (tab separated values) containing the
taxonomic descriptions of the \code{fasta_db} : The first column must contain the
Taxon ID corresponding to the fasta file name. The second column must contain
the QIIME2 formatted taxonomies (see \code{\link[=split_taxonomy]{split_taxonomy()}} for examples).}

\item{output}{Name and path of the final output file to save on the disk.
If NULL (default when fasta_db is a DNAStringSet), the function will return
the results in a data.frame.
Otherwise, the function returns nothing but saves the output on the disk. If fasta_db
is a path, the default behavior is to save the output in the same directory
in a file named "CV_blastn_output.csv".}

\item{label}{A string. The first column of the output file will contain label
repeated on every row. Defaults to the output file name when it is not NULL
or to an empty string otherwise.}

\item{folds_dir}{Where should the \verb{__Folds__} directory be created  ? i.e.
the temporary directory containing the query and reference DB for each fold + intermediary files.
By default it will be the same directory as fasta_db when it is a path or
the working directory when fasta_db is a DNAstringset. NB : any existing
\verb{__Folds__} direcory will be erased...}

\item{alternative_fasta_db}{If not NA or NULL (the default), \code{fasta_db} is
blasted against this alternative db instead of
blasted against itself. When k>1 the sequences from \code{fasta_db} in each fold
are removed from \code{alternative_fasta_db} based on their IDs}

\item{alternative_taxo}{Taxonomic file corresponding to \code{alternative_fasta_db}}

\item{k}{Number of folds to create (default : k = 10). If \code{k==1} the function
will use a leaked validation approach, i.e. the full database is blasted
against itself without removing any sequence.
The number of folds should not be >99 to avoid problems.}

\item{folds_subset}{Folds id to effectively blast against the database.
e.g. :  if \code{folds_subset} = 3:5 , we will blast only the folds 3, 4 and 5.
Useful mainly to test the code on a subset of the folds.
Defaults to 1:k, i.e. all the folds.}

\item{sequences_subset}{A vector of integers : we will blast only these
sequences for each fold. E.g. \code{sequences_subset} = 1:10 -->
we will blast only the first 10 sequences for each fold.
Useful mainly to test the code on a subset of the query sequences.
Ignored for any non numeric value.}

\item{query_filter}{A vector of characters containing sequences IDs to filter out
from the query sequences in each fold. Defaults to NULL (all sequences are used)}

\item{db_filter}{A vector of characters containing sequences IDs to filter out
from the reference database used for each fold. Defaults to NULL
(all sequences are used).}

\item{nb_cores}{An integer providing the number of cores to be used by \code{blastn}
(defaults to all cores).}

\item{max_target_seqs}{An integer. Maximum number of hits to be returned by
blast. Default = 15}

\item{verbose}{If TRUE (default) : prints messages during the process
including computing time.}

\item{clean_species}{If TRUE (default), the species names will be cleaned as
much as possible (remove subspecies, transform cf. into sp. ...)}

\item{folds_remove}{Logical. If TRUE (default), the directory \verb{__Folds__}
created during the cross-validation process will be removed.}

\item{seed}{An integer to chose if you want a perfectly reproducible result
(i.e. in the way the fold are created). Defaults to the system time, so
the results will change at each run.}
}
\value{
A csv file saved on the disk (with \verb{;} separated columns and \verb{,}
as decimal separators) or a data.frame containing the results of the
cross-validation process.
For each query sequence (\code{TaxID_query}) the table contains the known ("true") taxonomy
(i.e. columns \code{Kindgom_true}, \code{Phylum_true},..., \code{Genus_true}, \code{Species_true})
and the corresponding top 15 blast hits (by default) with their ID (\code{TaxID_blast})
and corresponding taxonomic information
(i.e. columns \code{Kindgom}, \code{Phylum},..., \code{Genus}, \code{Species}). For each hit
we also have 4 descriptive statistics provided by \code{blastn} : \code{E_value},
\code{Bit_score}, \code{Length} of the alignment and \code{Identity} (\% of identical bases).
For each line we also have an ID for the \code{Fold} (e.g. F01, F02,.... F10
for 10-fold Cross-Validation) and a \code{Label} which is identical for all
lines (by default, it is the output file name or an empty string).
The purpose of the label is for example to identify the strategy used when
CV_blast is run multiple times with different options/strategies and
the final results are merged (see examples).
}
\description{
This function will repeatedly extract a random sample of sequences from a DNA barcode reference
database in fasta format, then blast these query sequences against the remainder
of the database (k-fold cross-validation) or the whole database (leaked cross-validation)
and return the output of the top blast hits with the true and predicted taxonomies and
blastn statistics (bit score, identity,...) in a data.frame or in a csv file on the disk.
}
\examples{

# Example 1

# Retrieve an example reference database (fasta file) and its corresponding
# taxonomic information from the package data examples.
# This example contains >7000 sequences for the ITS2 barcode of plants from the
# order "Rosales" restricted to a portion of the gene amplified by a given
# given primer used in metabarcoding.
#
fasta_path <- system.file("extdata/ITS2_Rosales_Restricted.fasta",
                          package = "CVrefDB")
taxonomy_path <- system.file("extdata/ITS2_Rosales_Restricted.tsv",
                             package = "CVrefDB")

# Read the fasta and tsv files
fasta <- Biostrings::readDNAStringSet(fasta_path)
fasta
reftaxo <- read.table(taxonomy_path, sep = "\t", header = TRUE)
head(reftaxo)

# Execute a 10 fold cross validation (k = 10 by default) on the reference database.
# NB to speed up the computation time we restrict ourselves to the first 3 folds
# (`folds_subset = 1:3`) and to the first 10 query sequences in each fold
# (`sequences_subset = 1:10`). With their default values, the process is executed
# on all sequences

CV_results <-
    CV_blastn(fasta_db = fasta,
              taxo = reftaxo,
              label = "Test", # defaults to an empty string
              folds_subset = 1:3, # use only the 3 first folds (just for testing)
              sequences_subset = 1:10, # use onlythe first 10 sequences in each fold
              verbose = FALSE # silence the processing time logs
    )

# The output contains 15 rows (by default max_target_seqs = 15) for each
# queried sequence (TaxID_query) with its "true" taxonomy.
# Each row contains one blast hit (TaxID_blast)
head(CV_results)



# Example 2

# Instead of reading the fasta file and its corresponding taxonomy, you can
# also simply pass their path to CV_blastn(). By default, the output will then
# be saved in a csv file on the disk (argument output) instead of returned
# as a data.frame by the function (unless output = NULL).

# Retrieve the paths of 2 example files
#
# Remember that the taxonomy file MUST be a tab separated text file with 2 columns :
# col 1 = sequences IDs used in the fasta file, col 2 = full taxonomy in QIIME2 format

fasta_path <- system.file("extdata/ITS2_Rosales_Restricted.fasta",
                          package = "CVrefDB")
taxonomy_path <- system.file("extdata/ITS2_Rosales_Restricted.tsv",
                             package = "CVrefDB")



# First execute a 10 fold cross validation (k = 10) on the reference database.
# NB to speed up the computation time we restrict ourselves to the first 3 folds
# (`folds_subset = 1:3`) and to the first 10 query sequences in each fold
# (`sequences_subset = 1:10`).

# File where the output will be saved. Here, we save it in the temporary
# "directory"

output_path_10FoldCV <- paste0(tempdir(), "/ITS2_Rosales_Restricted_10FoldsCV.csv")

CV_blastn(fasta_db = fasta_path,
          taxo = taxonomy_path,
          output = output_path_10FoldCV,
          k = 10, # 10-fold cross-validation
          label = "10FoldsCV",
          folds_subset = 1:3, # use only on the 3 first folds (just for testing)
          sequences_subset = 1:10, # use only the first 10  sequences in each fold
          seed = 123 # use any integer to have replicable results
)


# File where the output will be saved. Here, we save it in the temporary
# " directory"

output_path_LeakedCV <- paste0(tempdir(), "/ITS2_Rosales_Restricted_LeakedCV.csv")

CV_blastn(fasta_db = fasta_path,
          taxo = taxonomy_path,
          output = output_path_LeakedCV,
          k = 1, # Leaked cross validation
          label = "LeakedCV",
          sequences_subset = 1:30, # use only thefirst 30 query sequences
          seed = 123 # use any integer to have replicable results
)



# Read the output files from the disk (NB with real large files, the use of
# faster approaches like `data.table::fread` is recommended).
# Note that the outputs are European csv files with semicolon as field separator
# and comma as decimal separator

output_10FoldCV <- read.table(output_path_10FoldCV,
                              header = TRUE, sep =  ";", dec = ",")
output_leakedCV <- read.table(output_path_LeakedCV,
                              header = TRUE, sep =  ";", dec = ",")

# Combine the 2 files. NB : the `Label` column allows you
# to keep track of the origin of the results once the outputs are combined

full_output <- rbind(output_10FoldCV, output_leakedCV)
head(full_output)

# Note that this output file does not assign a taxonomy. It just provides the
# n best blast hits. You can use the `assign_taxonomy()` function to do that.

# A rough way to assign a taxonomy is to take the
# hit with highest Bit_score value and lowest Evalue (and in case of ties
# we simply take the first in the table...) :

library(dplyr)
assigned <-
    full_output \%>\%
    group_by(Label, TaxID_query) \%>\%
    arrange(desc(Bit_score), E_value) \%>\%
    slice_head(n=1) \%>\%
    as.data.frame()
head(assigned)


# You can then for example compute the \% of correct predictions
# at species, genus or family level for the leaked CV and 10 Folds CV
# approaches:

assigned \%>\%
    group_by(Label) \%>\%
    summarize(
        Species = sum(Species_true == Species)*100/n(),
        Genus   = sum(Genus_true   == Genus)*100/n(),
        Family  = sum(Family_true  == Family)*100/n()
    )
}
